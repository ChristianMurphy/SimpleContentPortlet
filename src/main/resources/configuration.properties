#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# IDocumentPersistenceStrategy bean name to use for saving attachments.  Possible values are
# - fileSystemPersistenceStrategy
# - amazonS3PersistenceStrategy
attachment.document.persistence.bean=fileSystemPersistenceStrategy

##
## S3 Storage Persistence Configuration for Attachments Data
##

# Amazon Credentials:
# Amazon EC2 instances: Configure your EC2 instances to have a role that provides access to the appropriate bucket
# For local development and testing, store your AWS secret key and access key in ~/.aws/credentials
# (C:\Users\USER_NAME\.aws\credentials for Windows users).

# NOTE: Since uploading a new file (from SimpleContentPortlet or other locations) currently ALWAYS creates
# a new object, with S3 you could end up with storing a bunch of data that you pay monthly for and you
# don't have an easy way to tell if the objects stored are still being used or just costing you money
# for storage every month.  This same inefficiency exists when storing to the local file system but it
# is less significant since deploying a new version of the SimpleContentPortlet webapp wipes out
# the local storage location.
#
# In practice the portal typically doesn't have a large number of items uploaded (and hopefully not very many
# large items) so this concern is being deferred as not significant at the moment.  If it becomes an issue
# it will need to be dealt with.  You can always enable access logging on your S3 bucket and process those
# logs to determine if artifacts no longer receive accesses.

# S3 bucket name to save attachments to; e.g. portal-webresources.  Configure the S3 bucket for
# Website Hosting.  Configure bucket access rights accordingly (e.g. public access, etc.).
attachments.s3.bucket.name=
# URL to get to above-named bucket; e.g. https://portal-webresources.s3.amazonaws.com
attachments.s3.bucket.base.url=
# Path within bucket to store the attachments. URL to access resource will be
# <attachments.s3.bucket.base.url>/<attachments.s3.bucket.path>/<guid>/<filename.ext>
attachments.s3.bucket.path=portlets/attachments
# Duration in seconds for attachments to be cached by the browser. 2592000=60*60*24*30
attachments.s3.cache.control=private, max-age=2592000



